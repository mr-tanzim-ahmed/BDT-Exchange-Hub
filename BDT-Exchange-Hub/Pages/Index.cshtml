@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!-- Hero Section (Updated) -->
<section class="hero" style="width: 100vw; padding: 80px 20px; box-sizing: border-box; background: linear-gradient(135deg, #0d9488, #1e3a8a); color: #e5e7eb;">
    <div class="hero-content" style="max-width: 1200px; margin: 0 auto; text-align:center;">
        <h1 style="color: #facc15; text-shadow: 0 2px 5px rgba(0,0,0,0.4); font-size: 3.5rem;">Convert Currencies & Precious Metals</h1>
        <p style="font-size: 1.2rem; max-width: 650px; margin: 1rem auto 0;">Your centralized hub for real-time currency exchange and precious metal valuation, focused on the Bangladeshi Taka.</p>
    </div>
</section>

<!-- Converter Section -->
<section class="converter" style="max-width: 1200px; margin: 40px auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;">
    <h2 style="text-align:center; margin-bottom:20px;">Instant Converter</h2>
    <div class="converter-form" style="display:flex; gap:10px; flex-wrap:wrap; align-items:center; justify-content:center;">
        <select id="fromCurrency" style="padding: 10px; border-radius: 5px;">
            <option value="USD" selected>USD - US Dollar</option>
            <option value="EUR">EUR - Euro</option>
            <option value="GBP">GBP - Pound Sterling</option>
            <option value="INR">INR - Indian Rupee</option>
            <option value="BDT">BDT - Bangladeshi Taka</option>
            <option value="JPY">JPY - Japanese Yen</option>
            <option value="CAD">CAD - Canadian Dollar</option>
            <option value="AUD">AUD - Australian Dollar</option>
            <option value="XAU">Gold (XAU)</option>
            <option value="XAG">Silver (XAG)</option>
            <option value="XPT">Platinum (XPT)</option>
        </select>
        <select id="toCurrency" style="padding: 10px; border-radius: 5px;">
            <option value="USD">USD - US Dollar</option>
            <option value="EUR">EUR - Euro</option>
            <option value="GBP">GBP - Pound Sterling</option>
            <option value="INR">INR - Indian Rupee</option>
            <option value="BDT" selected>BDT - Bangladeshi Taka</option>
            <option value="JPY">JPY - Japanese Yen</option>
            <option value="CAD">CAD - Canadian Dollar</option>
            <option value="AUD">AUD - Australian Dollar</option>
            <option value="XAU">Gold (XAU)</option>
            <option value="XAG">Silver (XAG)</option>
            <option value="XPT">Platinum (XPT)</option>
        </select>
        <input type="number" id="amountInput" placeholder="Enter amount" value="1000" style="flex:1; min-width:150px; padding: 10px; border-radius: 5px; border: 1px solid #ccc;">
        <button id="convertBtn" class="convert-button" style="padding: 10px 20px; border-radius: 5px; background-color:#0d9488; color:white; border:none; cursor:pointer;">Convert Now</button>
    </div>
    <div id="resultBox" class="result-box" style="margin-top:15px; font-weight:bold; text-align:center; padding:15px; background-color:#eef; border-radius:5px;">Result will be shown here...</div>
</section>

<!-- Rates Section -->
<section class="rates" style="max-width: 1200px; margin: 40px auto; display:flex; gap:20px; flex-wrap:wrap;">
    <div class="rate-card" id="goldRateCard" style="flex:1; min-width:200px; padding:20px; border:1px solid #ccc; border-radius:8px;">
        <h3>Gold (XAU)</h3>
        <p class="rate" style="font-size:1.5rem; font-weight:bold;">Loading...</p>
        <div class="change">--</div>
    </div>
    <div class="rate-card" id="silverRateCard" style="flex:1; min-width:200px; padding:20px; border:1px solid #ccc; border-radius:8px;">
        <h3>Silver (XAG)</h3>
        <p class="rate" style="font-size:1.5rem; font-weight:bold;">Loading...</p>
        <div class="change">--</div>
    </div>
    <div class="rate-card" id="platinumRateCard" style="flex:1; min-width:200px; padding:20px; border:1px solid #ccc; border-radius:8px;">
        <h3>Platinum (XPT)</h3>
        <p class="rate" style="font-size:1.5rem; font-weight:bold;">Loading...</p>
        <div class="change">--</div>
    </div>
    <div class="rate-card" id="eurRateCard" style="flex:1; min-width:200px; padding:20px; border:1px solid #ccc; border-radius:8px;">
        <h3>EUR/USD</h3>
        <p class="rate" style="font-size:1.5rem; font-weight:bold;">Loading...</p>
        <div class="change">--</div>
    </div>
</section>

<!-- Trends Chart Section -->
<section class="trends-preview" style="max-width: 1200px; margin: 40px auto;">
    <h2 style="text-align:center; margin-bottom:20px;">BDT to USD Trend (Last 30 Days)</h2>
    <div class="graph-placeholder" style="background:#fff; border:1px solid #ddd; padding:20px; border-radius:8px;">
        <canvas id="trendsChart" style="width: 100%; height: 300px;"></canvas>
    </div>
</section>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DOM Elements ---
            const fromCurrencySelect = document.getElementById('fromCurrency');
            const toCurrencySelect = document.getElementById('toCurrency');
            const amountInput = document.getElementById('amountInput');
            const convertBtn = document.getElementById('convertBtn');
            const resultBox = document.getElementById('resultBox');
            const chartCanvas = document.getElementById('trendsChart');

            // --- API & Constants ---
            const API_URL = 'https://api.exchangerate-api.com/v4/latest/';
            const METALS = ['XAU', 'XAG', 'XPT'];
            let trendsChart = null;

            // --- Simulated Metal Prices (per ounce in USD) for reliability ---
            const metalPricesUSD = {
                XAU: 2450.50, // Gold
                XAG: 31.20,   // Silver
                XPT: 1050.75  // Platinum
            };

            // --- Main Functions ---
            async function fetchRates(base = 'USD') {
                try {
                    const response = await fetch(`${API_URL}${base}`);
                    if (!response.ok) throw new Error('Network response was not ok.');
                    return await response.json();
                } catch (error) {
                    console.error('Failed to fetch rates:', error);
                    return null;
                }
            }

            async function handleConversion() {
                const from = fromCurrencySelect.value;
                const to = toCurrencySelect.value;
                const amount = parseFloat(amountInput.value);

                if (isNaN(amount) || amount <= 0) {
                    resultBox.textContent = 'Please enter a valid amount.';
                    return;
                }
                resultBox.textContent = 'Converting...';

                const isFromMetal = METALS.includes(from);
                const isToMetal = METALS.includes(to);
                const rates = await fetchRates('USD');

                if (!rates) {
                    resultBox.textContent = 'Error: Could not fetch exchange rates.';
                    return;
                }

                let result;
                let valueInUSD;
                if (isFromMetal) {
                    const pricePerGram = metalPricesUSD[from] / 31.1035;
                    valueInUSD = amount * pricePerGram;
                } else {
                    valueInUSD = amount / rates.rates[from];
                }

                if (isToMetal) {
                    const pricePerGram = metalPricesUSD[to] / 31.1035;
                    result = valueInUSD / pricePerGram;
                    resultBox.textContent = `${amount.toLocaleString()} grams ${from} = ${result.toFixed(4)} grams ${to}`;
                } else {
                    result = valueInUSD * rates.rates[to];
                    resultBox.textContent = `${amount.toLocaleString()} ${from} = ${result.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ${to}`;
                }
            }

            async function updateRateCards() {
                const ratesData = await fetchRates('USD');
                if (!ratesData) return;

                document.querySelector('#goldRateCard .rate').textContent = `$${metalPricesUSD.XAU.toFixed(2)} / oz`;
                updateChangeElement(document.querySelector('#goldRateCard .change'), (Math.random() - 0.4) * 5);

                document.querySelector('#silverRateCard .rate').textContent = `$${metalPricesUSD.XAG.toFixed(2)} / oz`;
                updateChangeElement(document.querySelector('#silverRateCard .change'), (Math.random() - 0.5) * 5);

                document.querySelector('#platinumRateCard .rate').textContent = `$${metalPricesUSD.XPT.toFixed(2)} / oz`;
                updateChangeElement(document.querySelector('#platinumRateCard .change'), (Math.random() - 0.45) * 5);

                document.querySelector('#eurRateCard .rate').textContent = ratesData.rates.EUR.toFixed(4);
                updateChangeElement(document.querySelector('#eurRateCard .change'), (Math.random() - 0.5) * 1);
            }

            function updateChangeElement(element, change) {
                const changeClass = change >= 0 ? 'up' : 'down';
                const arrow = change >= 0 ? '▲' : '▼';
                element.innerHTML = `<span style="color:${changeClass === 'up' ? 'green' : 'red'};">${change.toFixed(2)}% ${arrow}</span>`;
            }

            async function simulateHistoricalData(base, target, days = 30) {
                const ratesData = await fetchRates(base);
                if (!ratesData) return { labels: [], data: [] };

                const currentRate = ratesData.rates[target];
                const labels = [];
                const data = [];

                for (let i = days - 1; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));

                    const fluctuation = (Math.random() - 0.5) * (currentRate * 0.05);
                    const simulatedRate = currentRate + fluctuation;
                    data.push(simulatedRate);
                }
                return { labels, data };
            }

            async function drawHistoricalChart() {
                const { labels, data } = await simulateHistoricalData('BDT', 'USD');

                if (trendsChart) {
                    trendsChart.destroy();
                }

                if (chartCanvas && data.length > 0) {
                     trendsChart = new Chart(chartCanvas, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'BDT to USD Exchange Rate',
                                data: data,
                                borderColor: 'rgb(13, 148, 136)',
                                backgroundColor: 'rgba(13, 148, 136, 0.1)',
                                fill: true,
                                tension: 0.4
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false }
                            },
                            scales: {
                                y: {
                                    beginAtZero: false,
                                    ticks: {
                                        callback: function(value) { return value.toFixed(5); }
                                    }
                                }
                            }
                        }
                    });
                }
            }

            function initializeApp() {
                handleConversion();
                updateRateCards();
                drawHistoricalChart();
                convertBtn.addEventListener('click', handleConversion);
            }

            initializeApp();
        });
    </script>
}